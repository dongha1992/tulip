import torch
import torch.nn.functional as F
from transformers import AutoTokenizer, AutoModelForSequenceClassification
import re

class SentimentAnalyzer:
    def __init__(self):
        # Í∞êÏ†ï ÏÇ¨Ï†Ñ Ï†ïÏùò
        self.EMOTION_DICT = {
            'positive': [
                'Í∞êÏÇ¨','Îã¥ÎäîÎã§','ÏóÖ','ÌöåÎ≥µ', 'Î∂àÏû•','Îß§Ïàò', 'üëçüèª', 'Ìò∏Ïû¨', 'ÏôÄ', 'ÏèúÎã§', 'Ïè¥Îùº',
                'Í∞ÄÏ¶àÏïÑ', 'Í∞ÄÎ≥¥Ïûê', 'Í∞ÄÏûê', 'Í∞ÑÎã§', 'Îñ°ÏÉÅ', 'ÎåÄÎ∞ï', 'Î°úÏºì', 'ÌôîÏÑ±', 'Í≥†Í≥†',
                'ÌïúÍ∞ïÎ∑∞', 'Ìà¨ÎçîÎ¨∏', 'Îã§Ìñâ','Íµø', 'Ï¢ãÎã§','Ïò§'
            ],
            'negative': [
                '„Ö†', '„Öú', '„Ö°', '„Öó', 'Ìïò..', 'Ìïò...', 'Ìùê..', 'Ìùë..', 'Ìóê..','ÏóêÌú¥',
                'ÌóàÍ±±', 'Ìóâ', 'ÌùëÌùë', 'ÌïòÏïÑ', 'Ìïò..', 'ÏïäÎã§', 'ÏóÜÎã§', 'ÏïÑÎãàÎã§','ÌïúÍ∞ï',
                'Îñ®Ïñ¥ÏßÑÎã§', 'Ìè≠ÎùΩ', 'ÏÜêÏã§', 'ÏÜêÏ†à', 'Îπö', 'ÌïòÎùΩ', 'ÌïòÌïúÍ∞Ä', 'Ï°¥Î≤Ñ', 'Ï°¥Î≤ÑÏ§ë',
                'ÌÉàÏ∂ú', 'Î¶¨Ïä§ÌÅ¨', 'ÏúÑÌóò', 'Î∂àÏïà', 'Í±±Ï†ï', 'ÎãµÏù¥ÏóÜ', 'ÎßùÌñà', 'ÌÑ∏Î†∏', 'Ï°∞Ï†ï',
                'ÌïòÎùΩÏû•', 'ÏïΩÏÑ∏Ïû•','ÏÇ¥Î†§Ï§ò', 'Ïã¨ÎûÄ','ÌöåÏùòÏ†Å', 'Í≥°ÏÜåÎ¶¨', 'ÎπöÌà¨', 'ÏÜêÏã§',
                'ÏÇ¥Î†§Ï§ò', 'ÏÜêÌï¥','Ïû°Ï£º','ÎßùÌñàÎã§', 'Ìè≠Îßù', 'ÎåÄÌè≠ÎùΩ', 'Í≥µÌè¨','Ïä§Ìä∏Î†àÏä§',
                'Îñ®Ïñ¥ÏßÄÎ©¥','Îü¥', 'Ìå®ÎãâÏÖÄ','Í∞úÎ¨¥ÏÑ≠ÎÑ§','Ï°∞ÏßÑ','Í≥†Ï†êÏã†Ìò∏','Ï£ΩÏë§Í≥†','ÏÑ§Í±∞ÏßÄ','Ïùå','Ìù†'
            ],
            'very_negative': [
                'ÏúºÏïÑ', 'ÏÇ¥Î†§', 'Ìïò..', 'Ìïò...', 'Ìùë..', 'Ìóê..', 'ÏóêÌú¥','ÌïúÍ∞ïÍ∞ÄÏûê',
                'ÌïúÍ∞ïÎ¨º', 'Ïñ¥Ìú¥', 'ÏÉÅÌèê', 'ÏÇ≠Ï†ú','„Ö°„Ö°'
            ],
            'swear_words': [
                '„ÖÖ„ÖÇ', '„ÖÇ„ÖÖ', '„Öà„Ñπ', '„ÖÅ„Öä', '„ÖÖ„Ñ≤','„Öà„Ñ¥', '„Öó„Öó',
                'Í∞ú„ÖÖ„Ñ≤', 'Í∞ú„ÖÇ„ÖÖ', 'Í∞ú„Öà„Ñπ', 'Í∞ú„ÖÖ„ÖÇ','Í∞ú„ÖÅ„Öä', 'Î†®',
                'ÏßÄ„Ñπ', 'Îã•„Öä', '„ÖÖ„Ñ≤Îì§', '„ÖÇ„ÖÖÎì§', '„Öà„ÑπÌïòÎÑ§',
                'ÎØ∏„Öä', 'Îπ°Ïπò', 'Í∞úÏÉà', 'Ïã≠', 'Ïãú„ÖÇ', 'Î≥ë„ÖÖ'
            ]
        }

        self.LABEL_MAPPING = {
            0: "Î∂ÄÏ†ï",
            1: "Îã§ÏÜå Î∂ÄÏ†ï",
            2: "Ï§ëÎ¶Ω",
            3: "Îã§ÏÜå Í∏çÏ†ï",
            4: "Í∏çÏ†ï"
        }

        # Î™®Îç∏ Ï¥àÍ∏∞Ìôî
        self.tokenizer = AutoTokenizer.from_pretrained("beomi/kcbert-base")
        self.model = AutoModelForSequenceClassification.from_pretrained(
            "beomi/kcbert-base",
            num_labels=5
        )

    def preprocess_text(self, text):
        text = text.lower()
        text = re.sub(r'\s+', ' ', text)
        return text.strip()

    def extract_emotion_features(self, text):
        text = self.preprocess_text(text)
        has_positive = any(em in text for em in self.EMOTION_DICT['positive'])
        has_negative = any(em in text for em in self.EMOTION_DICT['negative'])
        has_very_negative = any(em in text for em in self.EMOTION_DICT['very_negative'])
        has_swear = any(em in text for em in self.EMOTION_DICT['swear_words'])
        return has_positive, has_negative, has_very_negative, has_swear

    def analyze_text(self, text):
        try:
            emotion_features = self.extract_emotion_features(text)
            has_positive, has_negative, has_very_negative, has_swear = emotion_features

            inputs = self.tokenizer(
                text,
                return_tensors="pt",
                truncation=True,
                max_length=300,
                padding="max_length"
            )

            with torch.no_grad():
                outputs = self.model(**inputs)

            probabilities = F.softmax(outputs.logits, dim=-1)
            scores = probabilities[0].tolist()
            base_score = sum([score * (i * 25) for i, score in enumerate(scores)])

            # Ï†êÏàò Ï°∞Ï†ï
            if has_swear:
                base_score = 0
            elif has_positive:
                base_score = min(100, base_score + 40)
                if '!!' in text or '!!!!' in text:
                    base_score = max(90, base_score)
                if 'üëçüèª' in text:
                    base_score = min(100, base_score + 10)

            if has_very_negative:
                base_score = max(0, base_score - 60)
            elif has_negative:
                base_score = max(0, base_score - 40)

            # Í∞êÏ†ï Î∂ÑÎ•ò
            if base_score >= 75:
                sentiment = "Í∏çÏ†ï"
            elif base_score >= 55:
                sentiment = "Îã§ÏÜå Í∏çÏ†ï"
            elif base_score > 45 and base_score < 55:
                sentiment = "Ï§ëÎ¶Ω"
            elif base_score >= 25:
                sentiment = "Îã§ÏÜå Î∂ÄÏ†ï"
            else:
                sentiment = "Î∂ÄÏ†ï"

            return {
                'score': base_score,
                'label': sentiment,
                'confidence': "ÎÜíÏùå" if abs(base_score - 50) > 20 else "Ï§ëÍ∞Ñ",
                'class_probabilities': {
                    self.LABEL_MAPPING[i]: round(score * 100, 2)
                    for i, score in enumerate(scores)
                }
            }

        except Exception as e:
            print(f"Error processing text: {str(e)}")
            return {
                'score': 50.0,
                'label': "Ï§ëÎ¶Ω",
                'confidence': "ÎÇÆÏùå"
            }